diff --git a/GSM/ase.cpp b/GSM/ase.cpp
index 83842d4..26b04fc 100644
--- a/GSM/ase.cpp
+++ b/GSM/ase.cpp
@@ -130,7 +130,7 @@ double ASE::get_energy_grad(string file, double* grad, int natoms)
   string line;
   bool success = true;
 
-  success=getline(gradfile, line);
+  success=(bool)getline(gradfile, line);
   double V = -1 * atof(line.c_str()) / 27.2114;
   //printf(" found E: %7.5f \n",V);
 
@@ -142,7 +142,7 @@ double ASE::get_energy_grad(string file, double* grad, int natoms)
       grad[3*i+0] = grad[3*i+1] = grad[3*i+2] = 1.;
       break;
     }
-    success=getline(gradfile, line);
+    success=(bool)getline(gradfile, line);
     //cout << "RR " << line << endl;
     int length=StringTools::cleanstring(line);
     vector<string> tok_line = StringTools::tokenize(line, " \t[]");
diff --git a/GSM/bmat.cpp b/GSM/bmat.cpp
index 6957849..b0fd474 100644
--- a/GSM/bmat.cpp
+++ b/GSM/bmat.cpp
@@ -4683,7 +4683,7 @@ void ICoord::read_hessxyz(string filename, int write)
   int found = 0;
   while(!hessfile.eof())
   {
-    success = getline(hessfile,line);
+    success = (bool)getline(hessfile,line);
     if (line.find("Hessian of the SCF Energy")!=string::npos)
     {
       found = 1;
@@ -4698,11 +4698,11 @@ void ICoord::read_hessxyz(string filename, int write)
   while(!hessfile.eof() && found)
   {
     nf++;
-    success = getline(hessfile,line);
+    success = (bool)getline(hessfile,line);
     //cout << " RR0: " << line << endl;
     for (int j=0;j<N3;j++)
     {
-      getline(hessfile,line);
+      (bool)getline(hessfile,line);
       //cout << " RR: " << line << endl;
       int length=StringTools::cleanstring(line);
       vector<string> tok_line = StringTools::tokenize(line, " \t");
@@ -4834,13 +4834,13 @@ void ICoord::read_hessp(string filename)
   string line;
   bool success=true;
 
-  success=getline(hesspfile, line);
+  success=(bool)getline(hesspfile, line);
   //cout << " RR: " << line << endl;
   int length=StringTools::cleanstring(line);  
   tok_line = StringTools::tokenize(line, " \t");
   natomsf = atoi(tok_line[1].c_str());
 
-  success=getline(hesspfile, line);
+  success=(bool)getline(hesspfile, line);
   //cout << " RR: " << line << endl;
   length=StringTools::cleanstring(line);  
   tok_line = StringTools::tokenize(line, " \t");
@@ -4855,7 +4855,7 @@ void ICoord::read_hessp(string filename)
 
   for (int i=0;i<len;i++)
   {
-    success=getline(hesspfile, line);
+    success=(bool)getline(hesspfile, line);
     length=StringTools::cleanstring(line);
     if (length<1) break;
     tok_line = StringTools::tokenize(line, " \t");
diff --git a/GSM/gaussian.cpp b/GSM/gaussian.cpp
index c1f7846..e2a9bfb 100644
--- a/GSM/gaussian.cpp
+++ b/GSM/gaussian.cpp
@@ -141,7 +141,7 @@ double GAUSSIAN::get_energy_grad(string file, double* grad, int natoms)
   int done = 0;
   while (!gradfile.eof() && done<2)
   {
-    success=getline(gradfile, line);
+    success=(bool)getline(gradfile, line);
     if (line.find("SCF Energy")!=string::npos)
     {
       //cout << " RRe: " << line << endl;
@@ -155,7 +155,7 @@ double GAUSSIAN::get_energy_grad(string file, double* grad, int natoms)
       int ngf = 0;
       while (ngf<3*natoms)
       {
-        success=getline(gradfile, line);
+        success=(bool)getline(gradfile, line);
         tok_line = StringTools::tokenize(line, " \t");
         int lsize = tok_line.size();
         for (int j=0;j<lsize;j++)
diff --git a/GSM/grad.cpp b/GSM/grad.cpp
index e4110eb..58ab2fb 100644
--- a/GSM/grad.cpp
+++ b/GSM/grad.cpp
@@ -377,7 +377,7 @@ int Gradient::read_nstates()
 
   string line;
   int nstates0 = 0;
-  bool success = getline(infile, line);
+  bool success = (bool)getline(infile, line);
   nstates0 = atoi(line.c_str());
 
   infile.close();
@@ -425,7 +425,7 @@ int Gradient::read_molpro_init(string* &hf_lines)
   bool success=true;
   while (!infile.eof())
   {
-    success=getline(infile, line);
+    success=(bool)getline(infile, line);
     if (success)
       hf_lines0[nhf++] = line;
   }
@@ -462,7 +462,7 @@ void Gradient::read_molpro_settings(int& nstates0, int& nclosed, int& nocc, int&
   int nf = 0;
   while (!infile.eof())
   {
-    success=getline(infile, line);
+    success=(bool)getline(infile, line);
     vector<string> tok_line = StringTools::tokenize(line, " ");
     //cout << "RR0: " << line << endl; fflush(stdout);
 
@@ -690,7 +690,7 @@ int Gradient::force_init(string ffile)
   int nf = 0;
   while (!infile.eof())
   {
-    success=getline(infile, line);
+    success=(bool)getline(infile, line);
     vector<string> tok_line = StringTools::tokenize(line, " ");
     if (tok_line.size()>3)
     {
diff --git a/GSM/gstring.cpp b/GSM/gstring.cpp
index e53ff9d..8f69894 100644
--- a/GSM/gstring.cpp
+++ b/GSM/gstring.cpp
@@ -891,7 +891,7 @@ int GString::isomer_init(string isofilename)
     printf("  WARNING: ignoring BONDS in ISOMERS file because BOND_FRAGMENTS == 0 or 1 \n");
 
   nfound = 0;
-
+  // nbond = 0;
   nadd = 0;
   nbrk = 0;
   nangle = 0;
@@ -924,7 +924,7 @@ int GString::isomer_init(string isofilename)
   vector<string> tok_line;
   while(!output.eof())
   {
-    getline(output,line);
+    (bool)getline(output,line);
     //cout << " RR " << line << endl;
     if (line.find("BOND")!=string::npos && bondfrags==0)
     {
@@ -1115,7 +1115,7 @@ void GString::parameter_init(string infilename)
     stillreading=false;
     // set to false and set back to true if we read something
     // get filename
-    getline(infile, line);
+    (bool)getline(infile, line);
     vector<string> tok_line = StringTools::tokenize(line, " ,\t");
     templine=StringTools::newCleanString(tok_line[0]);
     tagname=StringTools::trimRight(templine);
@@ -1284,14 +1284,14 @@ void GString::structure_init(string xyzfile)
 
   string line;
   bool success=true;
-  success=getline(infile, line);
+  success=(bool)getline(infile, line);
   if (success){
     int length=StringTools::cleanstring(line);
     natoms=atoi(line.c_str());
   }
   cout <<"  -The number of atoms is: " << natoms << endl;
 
-  success=getline(infile, line);
+  success=(bool)getline(infile, line);
   vector<string> tok_line0 = StringTools::tokenize(line, " \t");
   CHARGE = 0;
   if (tok_line0.size()>0)
@@ -1308,7 +1308,7 @@ void GString::structure_init(string xyzfile)
 
   cout <<"  -Reading the atomic names...";
   for (int i=0;i<natoms;i++){
-    success=getline(infile, line);
+    success=(bool)getline(infile, line);
     int length=StringTools::cleanstring(line);
     vector<string> tok_line = StringTools::tokenize(line, " \t");
     anames[i]=tok_line[0];
@@ -1345,8 +1345,8 @@ void GString::structure_init(string xyzfile)
   for (int i=0;i<2;i++)
   {
     if (isSSM && i==1) break;
-    success=getline(infile, line);
-    success=getline(infile, line);
+    success=(bool)getline(infile, line);
+    success=(bool)getline(infile, line);
     for (int j=0;j<natoms;j++)
     {
       if (infile.eof())
@@ -1354,7 +1354,7 @@ void GString::structure_init(string xyzfile)
         printf("   end of xyz file reached early, exiting \n");
         exit(1);
       }
-      success=getline(infile, line);
+      success=(bool)getline(infile, line);
       int length=StringTools::cleanstring(line);
       vector<string> tok_line = StringTools::tokenize(line, " \t");
 //      cout << " i: " << i << " string: " << line << endl;
@@ -5997,7 +5997,7 @@ int GString::read_string(string stringfile, double** coordsn, double* energies)
 
   string line;
   bool success=true;
-  success=getline(infile, line);
+  success=(bool)getline(infile, line);
   if (success)
   {
     int length=StringTools::cleanstring(line);
@@ -6013,8 +6013,8 @@ int GString::read_string(string stringfile, double** coordsn, double* energies)
   for (int i=0;i<nnmax;i++)
   {
     if (i>0)
-      success=getline(infile, line);
-    success=getline(infile, line);
+      success=(bool)getline(infile, line);
+    success=(bool)getline(infile, line);
     if (infile.eof())
     {
       printf("   end of restart.xyz reached \n");
@@ -6026,7 +6026,7 @@ int GString::read_string(string stringfile, double** coordsn, double* energies)
 
     for (int j=0;j<natoms;j++)
     {
-      success=getline(infile, line);
+      success=(bool)getline(infile, line);
       int length=StringTools::cleanstring(line);
       vector<string> tok_line = StringTools::tokenize(line, " \t");
 //      cout << " i: " << i << " string: " << line << endl;
diff --git a/GSM/icoord.cpp b/GSM/icoord.cpp
index f01ee67..0b4f1d9 100644
--- a/GSM/icoord.cpp
+++ b/GSM/icoord.cpp
@@ -1866,14 +1866,14 @@ void ICoord::structure_read(string xyzfile){
   
   string line;
   bool success=true;
-  success=getline(infile, line);
+  success=(bool)getline(infile, line);
   if (success){
     int length=StringTools::cleanstring(line);
     natoms=atoi(line.c_str());
   }
   cout <<"  natoms: " << natoms << endl;
   
-  success=getline(infile, line);
+  success=(bool)getline(infile, line);
 //  if (success){  
 //    comment=line;
 //  }
@@ -1885,7 +1885,7 @@ void ICoord::structure_read(string xyzfile){
     
   //cout <<"  -Reading the atomic names...";
   for (int i=0;i<natoms;i++){
-    success=getline(infile, line);
+    success=(bool)getline(infile, line);
     int length=StringTools::cleanstring(line);
     vector<string> tok_line = StringTools::tokenize(line, " \t");
     anames[i]=tok_line[0];
@@ -1911,10 +1911,10 @@ void ICoord::structure_read(string xyzfile){
   
   
 //  for (int i=1;i<=2;i++){
-    success=getline(infile, line);
-    success=getline(infile, line);
+    success=(bool)getline(infile, line);
+    success=(bool)getline(infile, line);
     for (int j=0;j<natoms;j++){
-      success=getline(infile, line);
+      success=(bool)getline(infile, line);
       int length=StringTools::cleanstring(line);
       vector<string> tok_line = StringTools::tokenize(line, " \t");
       coords[3*j+0]=atof(tok_line[1].c_str());
@@ -1973,10 +1973,10 @@ int ICoord::read_ics(string filename)
   string line;
   bool success=true;
   int type = 1;
-  success=getline(infile, line);
+  success=(bool)getline(infile, line);
   while (!infile.eof())
   {
-    success=getline(infile, line);
+    success=(bool)getline(infile, line);
     //cout << "RR0: " << line << endl;
     int length=StringTools::cleanstring(line);
     vector<string> tok_line = StringTools::tokenize(line, " \t");
@@ -1993,7 +1993,7 @@ int ICoord::read_ics(string filename)
 
         for (int i=0;i<nbonds;i++)
         {
-          success=getline(infile, line);
+          success=(bool)getline(infile, line);
           //cout << "RR: " << line << endl;
           length=StringTools::cleanstring(line);
           tok_line = StringTools::tokenize(line, " \t");
@@ -2015,7 +2015,7 @@ int ICoord::read_ics(string filename)
 
         for (int i=0;i<nangles;i++)
         {
-          success=getline(infile, line);
+          success=(bool)getline(infile, line);
           //cout << "RR: " << line << endl;
           length=StringTools::cleanstring(line);
           tok_line = StringTools::tokenize(line, " \t");
@@ -2038,7 +2038,7 @@ int ICoord::read_ics(string filename)
 
         for (int i=0;i<ntor;i++)
         {
-          success=getline(infile, line);
+          success=(bool)getline(infile, line);
           //cout << "RR: " << line << endl;
           length=StringTools::cleanstring(line);
           tok_line = StringTools::tokenize(line, " \t");
diff --git a/GSM/knnr.cpp b/GSM/knnr.cpp
index 3b67262..30c15f4 100644
--- a/GSM/knnr.cpp
+++ b/GSM/knnr.cpp
@@ -1118,7 +1118,7 @@ int KNNR::get_files(string fileprefix, string filesuffix, string* files)
   bool success=true;
   while (!infile.eof())
   {
-    success=getline(infile, line);
+    success=(bool)getline(infile, line);
     //cout << "RR: " << line << endl;
     int length=StringTools::cleanstring(line);
     vector<string> tok_line = StringTools::tokenize(line, " \t");
@@ -1148,10 +1148,10 @@ int KNNR::read_ics(int& nbonds, int** bonds, int& nangles, int** angles, int& nt
   string line;
   bool success=true;
   int type = 1;
-  success=getline(infile, line);
+  success=(bool)getline(infile, line);
   while (!infile.eof())
   {
-    success=getline(infile, line);
+    success=(bool)getline(infile, line);
     //cout << "RR0: " << line << endl;
     int length=StringTools::cleanstring(line);
     vector<string> tok_line = StringTools::tokenize(line, " \t");
@@ -1166,7 +1166,7 @@ int KNNR::read_ics(int& nbonds, int** bonds, int& nangles, int** angles, int& nt
 
         for (int i=0;i<nbonds;i++)
         {
-          success=getline(infile, line);
+          success=(bool)getline(infile, line);
           //cout << "RR: " << line << endl;
           length=StringTools::cleanstring(line);
           tok_line = StringTools::tokenize(line, " \t");
@@ -1186,7 +1186,7 @@ int KNNR::read_ics(int& nbonds, int** bonds, int& nangles, int** angles, int& nt
 
         for (int i=0;i<nangles;i++)
         {
-          success=getline(infile, line);
+          success=(bool)getline(infile, line);
           //cout << "RR: " << line << endl;
           length=StringTools::cleanstring(line);
           tok_line = StringTools::tokenize(line, " \t");
@@ -1207,7 +1207,7 @@ int KNNR::read_ics(int& nbonds, int** bonds, int& nangles, int** angles, int& nt
 
         for (int i=0;i<ntor;i++)
         {
-          success=getline(infile, line);
+          success=(bool)getline(infile, line);
           //cout << "RR: " << line << endl;
           length=StringTools::cleanstring(line);
           tok_line = StringTools::tokenize(line, " \t");
@@ -1253,18 +1253,18 @@ void KNNR::xyz_read(string* anames, double* coords, string xyzfile)
   
   string line;
   bool success=true;
-  success=getline(infile, line);
+  success=(bool)getline(infile, line);
   if (success){
     int length=StringTools::cleanstring(line);
     //natoms=atoi(line.c_str());
   }
   //printf(" natoms: %i \n",natoms);
   
-  success=getline(infile, line);
+  success=(bool)getline(infile, line);
   
   for (int i=0;i<natoms;i++)
   {
-    success=getline(infile, line);
+    success=(bool)getline(infile, line);
     int length=StringTools::cleanstring(line);
     vector<string> tok_line = StringTools::tokenize(line, " \t");
     anames[i]=tok_line[0];
@@ -1337,8 +1337,8 @@ double KNNR::read_one_xyz(int n, string filename, double* coords)
     int done = 0;
     while(!infile.eof() && !done)
     {
-      success = getline(infile,line);
-      success = getline(infile,line);
+      success = (bool)getline(infile,line);
+      success = (bool)getline(infile,line);
 
       //cout << " RR: " << line << endl; fflush(stdout);
       int length=StringTools::cleanstring(line);
@@ -1349,7 +1349,7 @@ double KNNR::read_one_xyz(int n, string filename, double* coords)
       {
         for (int j=0;j<natoms;j++)
         {
-          getline(infile,line);
+          (bool)getline(infile,line);
           //cout << " RR: " << line << endl; fflush(stdout);
           int length=StringTools::cleanstring(line);
           vector<string> tok_line = StringTools::tokenize(line, " \t");
@@ -1432,9 +1432,9 @@ void KNNR::read_one_hess(int n, int nic, string filename)
     int done = 0;
     while(!infile.eof() && !done)
     {
-      success = getline(infile,line);
+      success = (bool)getline(infile,line);
       //cout << "RR0: " << line << endl;
-      success = getline(infile,line);
+      success = (bool)getline(infile,line);
       //cout << "RR0: " << line << endl;
       int length=StringTools::cleanstring(line);
       vector<string> tok_line = StringTools::tokenize(line, " \t");
@@ -1447,7 +1447,7 @@ void KNNR::read_one_hess(int n, int nic, string filename)
       {
         for (int j=0;j<nic;j++)
         {
-          getline(infile,line);
+          (bool)getline(infile,line);
           //cout << " RR: " << line << endl; fflush(stdout);
           length=StringTools::cleanstring(line);
           tok_line = StringTools::tokenize(line, " \t");
diff --git a/GSM/molpro.cpp b/GSM/molpro.cpp
index a1c69bd..345c75e 100644
--- a/GSM/molpro.cpp
+++ b/GSM/molpro.cpp
@@ -318,7 +318,7 @@ int Molpro::read_E()
   int found = 0;
   while(!outfilei.eof())
   {
-    success=getline(outfilei, line);
+    success=(bool)getline(outfilei, line);
     if (line.find("MCSCF STATE 1.1 Energy")!=string::npos)
     {
       //cout << " found: " << line << endl;
@@ -481,17 +481,17 @@ int Molpro::getGrad(double* grads)
 
   string line;
   bool success=true;
-  success=getline(outfilei, line);
+  success=(bool)getline(outfilei, line);
   int cont = 0;
   while(!outfilei.eof())
   {
-    success=getline(outfilei, line);
+    success=(bool)getline(outfilei, line);
     if (line.find("SA-MC GRADIENT FOR STATE")!=string::npos)
     {
       //cout << " found: " << line << endl;
-      getline(outfilei,line);
-      getline(outfilei,line);
-      getline(outfilei,line);
+      (bool)getline(outfilei,line);
+      (bool)getline(outfilei,line);
+      (bool)getline(outfilei,line);
       cont = 1;
       break;
     }
@@ -499,9 +499,9 @@ int Molpro::getGrad(double* grads)
     if (line.find("SCF GRADIENT FOR STATE")!=string::npos)
     {
       //cout << " found: " << line << endl;
-      getline(outfilei,line);
-      getline(outfilei,line);
-      getline(outfilei,line);
+      (bool)getline(outfilei,line);
+      (bool)getline(outfilei,line);
+      (bool)getline(outfilei,line);
       cont = 1;
       break;
     }
@@ -511,7 +511,7 @@ int Molpro::getGrad(double* grads)
   if (cont)
   for (int i=0;i<natoms;i++)
   {
-    success=getline(outfilei, line);
+    success=(bool)getline(outfilei, line);
     int length=StringTools::cleanstring(line);
     vector<string> tok_line = StringTools::tokenize(line, " \t");
     //cout << " RR: " << line << endl;
@@ -557,17 +557,17 @@ int Molpro::getDVec(double* dvecs)
 
   string line;
   bool success=true;
-  success=getline(outfilei, line);
+  success=(bool)getline(outfilei, line);
   int cont = 0;
   while(!outfilei.eof())
   {
-    success=getline(outfilei, line);
+    success=(bool)getline(outfilei, line);
     if (line.find("SA-MC NACME FOR STATES")!=string::npos)
     {
       //cout << " found: " << line << endl;
-      getline(outfilei,line);
-      getline(outfilei,line);
-      getline(outfilei,line);
+      (bool)getline(outfilei,line);
+      (bool)getline(outfilei,line);
+      (bool)getline(outfilei,line);
       cont = 1;
       break;
     }
@@ -576,7 +576,7 @@ int Molpro::getDVec(double* dvecs)
   if (cont)
   for (int i=0;i<natoms;i++)
   {
-    success=getline(outfilei, line);
+    success=(bool)getline(outfilei, line);
     int length=StringTools::cleanstring(line);
     vector<string> tok_line = StringTools::tokenize(line, " \t");
     //cout << " RR: " << line << endl;
diff --git a/GSM/mopac.cpp b/GSM/mopac.cpp
index d183d9c..45fb758 100644
--- a/GSM/mopac.cpp
+++ b/GSM/mopac.cpp
@@ -318,7 +318,7 @@ double Mopac::read_output(string filename) {
   vector<string> tok_line;
   while(!output.eof()) 
   { 
-    getline(output,line);
+    (bool)getline(output,line);
 //    cout << " RR " << line << endl;
     if (line.find("CYCLE:     1")!=string::npos)
     {
@@ -351,16 +351,16 @@ double Mopac::read_grad(string filename) {
   vector<string> tok_line;
   while(!output.eof()) 
   { 
-    getline(output,line);
+    (bool)getline(output,line);
    // cout << " RR " << line << endl;
     if (line.find("DERIVATIVES")!=string::npos)
     {
       //cout << "Found Grad Section " << line << endl;
-      getline(output,line);
-      getline(output,line);
+      (bool)getline(output,line);
+      (bool)getline(output,line);
       for (int i=0;i<3*natoms;i++)
       {
-        getline(output,line);
+        (bool)getline(output,line);
         tok_line = StringTools::tokenize(line, " \t");
         grad[i]=atof(tok_line[6].c_str())/627.5;
         //cout << " " << grad[i] << endl;
@@ -537,7 +537,7 @@ void Mopac::xyz_read(string filename){
   int i = 0;
   while(!output.eof()) 
   { 
-    getline(output,line);
+    (bool)getline(output,line);
 //    cout << " RR " << line << endl;
     if (count == 2)
     {
@@ -559,9 +559,9 @@ void Mopac::xyz_read(string filename){
     {
 //      cout << "Final: " << line << endl;
       count++;
-      getline(output,line);
-      getline(output,line);
-      getline(output,line);
+      (bool)getline(output,line);
+      (bool)getline(output,line);
+      (bool)getline(output,line);
     }
   }
 
diff --git a/GSM/orca.cpp b/GSM/orca.cpp
index 8cce41d..07b7dbf 100644
--- a/GSM/orca.cpp
+++ b/GSM/orca.cpp
@@ -138,7 +138,7 @@ double ORCA::get_energy_grad(string file, double* grad, int natoms)
   int done = 0;
   while (!gradfile.eof() && done<2)
   {
-    success=getline(gradfile, line);
+    success=(bool)getline(gradfile, line);
     if (line.find("Total Energy")!=string::npos)
     {
       //cout << " RRe: " << line << endl; fflush(stdout);
@@ -148,12 +148,12 @@ double ORCA::get_energy_grad(string file, double* grad, int natoms)
     }
     if (line.find("CARTESIAN GRADIENT")!=string::npos)
     {
-      success=getline(gradfile, line);
-      success=getline(gradfile, line);
+      success=(bool)getline(gradfile, line);
+      success=(bool)getline(gradfile, line);
       //cout << " RR0g: " << line << endl;
       for (int j=0;j<natoms;j++)
       {
-        success=getline(gradfile, line);
+        success=(bool)getline(gradfile, line);
         //cout << " RRg: " << line << endl;
         tok_line = StringTools::tokenize(line, " \t");
         for (int k=0;k<3;k++)
diff --git a/GSM/qchem.cpp b/GSM/qchem.cpp
index fe5d5a2..3db8657 100644
--- a/GSM/qchem.cpp
+++ b/GSM/qchem.cpp
@@ -64,7 +64,7 @@ void QChem::init(string infilename, int natoms0, int* anumbers0, string* anames0
 
   // parse the input section here
 
-  getline(infile, line);
+  (bool)getline(infile, line);
   templine=StringTools::newCleanString(line);
   scrBaseDir=StringTools::trimRight(templine);
   if (scrBaseDir.find("$")!=string::npos)
@@ -87,7 +87,7 @@ void QChem::init(string infilename, int natoms0, int* anumbers0, string* anames0
   }
   //cout <<"  -scratch base directory set to: " << scrBaseDir << endl;
 
-  getline(infile, line);
+  (bool)getline(infile, line);
   templine=StringTools::newCleanString(line);
   runName=StringTools::trimRight(templine);
   runName+=nstr;
@@ -164,7 +164,7 @@ int QChem::read_hess(double* hess)
     printf(" failed to open qcout file \n");
     return 0;
   }
-  while (getline(qcfile, line) && cont)
+  while ((bool)getline(qcfile, line) && cont)
   {
     if (line.find("Hessian of the SCF Energy")!=string::npos)
     {
@@ -177,10 +177,10 @@ int QChem::read_hess(double* hess)
   while (!qcfile.eof())
   {
     n++;
-    getline(qcfile,line);
+    (bool)getline(qcfile,line);
     for (int j=0;j<N3;j++)
     {
-      getline(qcfile,line);
+      (bool)getline(qcfile,line);
     // cout << " RR: " << line << endl;
       int length=StringTools::cleanstring(line);
       vector<string> tok_line = StringTools::tokenize(line, " \t");
@@ -317,7 +317,7 @@ double QChem::grads(double* coords, double* grad)
     printf(" failed to open qcout file \n");
     getgrad = 0;
   }
-  while (getline(qcfile, line) && getgrad)
+  while ((bool)getline(qcfile, line) && getgrad)
   {
     if (StringTools::contains(line, test))
     {
@@ -382,7 +382,7 @@ double QChem::get_energy(string filename) {
   energy = 0;
   while(!output.eof()) 
   { 
-    getline(output,line);
+    (bool)getline(output,line);
 //    cout << " RR " << line << endl;
     if (line.find("Total energy in the final basis set")!=string::npos)
     {
@@ -430,9 +430,9 @@ int QChem::scangradient(string file, double* grad, int natoms)
   bool success = true;
   //cout << "reading gradient... " << endl;
 
-  success=getline(gradfile, line);
-  success=getline(gradfile, line);
-  success=getline(gradfile, line);
+  success=(bool)getline(gradfile, line);
+  success=(bool)getline(gradfile, line);
+  success=(bool)getline(gradfile, line);
 
   for (int i=0;i<natoms;i++)
   {
@@ -442,7 +442,7 @@ int QChem::scangradient(string file, double* grad, int natoms)
       grad[3*i+0] = grad[3*i+1] = grad[3*i+2] = 1.;
       break;
     }
-    success=getline(gradfile, line);
+    success=(bool)getline(gradfile, line);
     //cout << "RR " << line << endl;
     int length=StringTools::cleanstring(line);
     vector<string> tok_line = StringTools::tokenize(line, " \t");
diff --git a/GSM/qchemsf.cpp b/GSM/qchemsf.cpp
index c02ce7e..7870536 100644
--- a/GSM/qchemsf.cpp
+++ b/GSM/qchemsf.cpp
@@ -73,7 +73,7 @@ void QChemSF::init(string infilename, int natoms0, int* anumbers0, string* aname
 
   // parse the input section here
 
-  getline(infile, line);
+  (bool)getline(infile, line);
   templine=StringTools::newCleanString(line);
   scrBaseDir=StringTools::trimRight(templine);
   if (scrBaseDir.find("$")!=string::npos)
@@ -96,7 +96,7 @@ void QChemSF::init(string infilename, int natoms0, int* anumbers0, string* aname
   }
   //cout <<"  -scratch base directory set to: " << scrBaseDir << endl;
 
-  getline(infile, line);
+  (bool)getline(infile, line);
   templine=StringTools::newCleanString(line);
   runName=StringTools::trimRight(templine);
   runName+=nstr;
@@ -243,7 +243,7 @@ double QChemSF::calc_grads(double* coords)
     printf(" failed to open qcout file \n");
     getgrad = 0;
   }
-  while (getline(qcfile, line) && getgrad)
+  while ((bool)getline(qcfile, line) && getgrad)
   {
     if (line.find(test)!=string::npos)
     {
@@ -288,7 +288,7 @@ double QChemSF::get_energy()
   int nf = 0;
   while(!output.eof()) 
   { 
-    getline(output,line);
+    (bool)getline(output,line);
 //    cout << " RR " << line << endl;
     if (line.find("Total energy in the final basis set")!=string::npos)
     {
@@ -349,7 +349,7 @@ void QChemSF::get_grads()
   int wg = 0;
   while (!gradfile.eof())
   {
-    success=getline(gradfile, line);
+    success=(bool)getline(gradfile, line);
     if (line.find("GSM-formatted gradient")!=string::npos)
     {
       double* gradn = grad1;
@@ -360,7 +360,7 @@ void QChemSF::get_grads()
 
       for (int i=0;i<natoms;i++)
       {
-        success=getline(gradfile, line);
+        success=(bool)getline(gradfile, line);
         //cout << "RR " << line << endl;
         int length=StringTools::cleanstring(line);
         vector<string> tok_line = StringTools::tokenize(line, " \t");
diff --git a/GSM/stringtools.cpp b/GSM/stringtools.cpp
index 5753e95..939f895 100644
--- a/GSM/stringtools.cpp
+++ b/GSM/stringtools.cpp
@@ -335,7 +335,7 @@ bool StringTools::findstr(ifstream &fstr, string tag){
    int linecount=0; // for debug purpose only
    string line;
 
-   while(getline(fstr, line)){
+   while((bool)getline(fstr, line)){
       linecount++;
       found=contains(line, tag);
       if (found) break;
@@ -351,7 +351,7 @@ bool StringTools::findstr(ifstream &fstr, string tag, string & outline){
    bool found=false;
    string line;
 
-   while(getline(fstr, line)){
+   while((bool)getline(fstr, line)){
       //      linecount++;
       found=contains(line, tag);
       if (found) {outline=line;break;}
diff --git a/GSM/turbomole.cpp b/GSM/turbomole.cpp
index 49060fe..33d2d2d 100644
--- a/GSM/turbomole.cpp
+++ b/GSM/turbomole.cpp
@@ -75,7 +75,7 @@ void Turbomole::init(string infilename, int natoms0, int* anumbers0, string* ana
 
   // parse the input section here
 
-  getline(infile, line);
+  (bool)getline(infile, line);
   templine=StringTools::newCleanString(line);
   scrBaseDir=StringTools::trimRight(templine);
   if (scrBaseDir.find("$")!=string::npos)
@@ -98,7 +98,7 @@ void Turbomole::init(string infilename, int natoms0, int* anumbers0, string* ana
   }
   //cout <<"  -scratch base directory set to: " << scrBaseDir << endl;
 
-  getline(infile, line);
+  (bool)getline(infile, line);
   templine=StringTools::newCleanString(line);
   //runName=StringTools::trimRight(templine);
   //runName+=nstr;
@@ -109,7 +109,7 @@ void Turbomole::init(string infilename, int natoms0, int* anumbers0, string* ana
 
   //runName0 = StringTools::int2str(runNum,4,"0")+"."+StringTools::int2str(runend,4,"0");
 
-  getline(infile, line);
+  (bool)getline(infile, line);
   vector<string> tok_line = StringTools::tokenize(line, " ,\t");
   templine=StringTools::newCleanString(tok_line[0]);
   tagname=StringTools::trimRight(templine);
@@ -123,7 +123,7 @@ void Turbomole::init(string infilename, int natoms0, int* anumbers0, string* ana
   else
      RI=0;
 
-  getline(infile, line);
+  (bool)getline(infile, line);
   tok_line = StringTools::tokenize(line, " ,\t");
   templine=StringTools::newCleanString(tok_line[0]);
   tagname=StringTools::trimRight(templine);
@@ -136,7 +136,7 @@ void Turbomole::init(string infilename, int natoms0, int* anumbers0, string* ana
   else
      COSMO=0;
 
-  getline(infile, line);
+  (bool)getline(infile, line);
   tok_line = StringTools::tokenize(line, " ,\t");
   templine=StringTools::newCleanString(tok_line[0]);
   tagname=StringTools::trimRight(templine);
@@ -344,7 +344,7 @@ double Turbomole::grads(double* coords, double* grad)
     printf(" failed to open turboout file \n");
     getgrad = 0;
   }
-  while (getline(turbofile, line) && getgrad)
+  while ((bool)getline(turbofile, line) && getgrad)
   {
     if (StringTools::contains(line, test))
     {
@@ -414,7 +414,7 @@ double Turbomole::get_energy(string filename) {
   energy = 0;
   while(!output.eof()) 
   { 
-    getline(output,line);
+    (bool)getline(output,line);
     //cout << " RR " << line << endl;
     if (line.find("total energy      =")!=string::npos)
     {
@@ -458,9 +458,9 @@ int Turbomole::scangradient(string file, double* grad, int natoms)
   bool success = true;
   cout << "reading gradient from... " << file.c_str() << endl;
 
-  success=getline(gradfile, line);
-  success=getline(gradfile, line);
-  success=getline(gradfile, line);
+  success=(bool)getline(gradfile, line);
+  success=(bool)getline(gradfile, line);
+  success=(bool)getline(gradfile, line);
 
   //for (int i=0;i<natoms;i++)
   for (int i=0;i<natoms*2+1;i++)
@@ -471,7 +471,7 @@ int Turbomole::scangradient(string file, double* grad, int natoms)
       grad[3*i+0] = grad[3*i+1] = grad[3*i+2] = 1.;
       break;
     }
-    success=getline(gradfile, line);
+    success=(bool)getline(gradfile, line);
    // cout << "RR " << line << endl;
     int length=StringTools::cleanstring(line);
     vector<string> tok_line = StringTools::tokenize(line, " \t");
